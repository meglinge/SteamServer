name: CMake

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  VULKAN_SDK: C:\VulkanSDK\1.3.231.1
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
      - name: Install WinGet
        uses: Cyberboss/install-winget@v1
      - name: Install Vulkan
        run: |
          winget install KhronosGroup.VulkanSDK --disable-interactivity --accept-source-agreements

      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: run-vcpkg
        uses: lukka/run-vcpkg@v11.1
        with:
          vcpkgDirectory: ${{github.workspace }}/ThirdTool/vcpkg

      - name: Run CMake consuming CMakePresets.json and vcpkg.json by mean of vcpkg.
        uses: lukka/run-cmake@v10
        with:
          # This is the default path to the CMakeLists.txt along side the
          # CMakePresets.json. Change if you need have CMakeLists.txt and CMakePresets.json
          # located elsewhere.
          cmakeListsTxtPath: "${{ github.workspace }}/CMakeLists.txt"

          # You could use CMake workflow presets defined in the CMakePresets.json
          # with just this line below. Note this one cannot be used with any other
          # preset input, it is mutually exclusive.
          # workflowPreset: 'workflow-name'

          # This is the name of the CMakePresets.json's configuration to use to generate
          # the project files. This configuration leverages the vcpkg.cmake toolchain file to
          # run vcpkg and install all dependencies specified in vcpkg.json.
          configurePreset: "x64-release"
          # Additional arguments can be appended to the cmake command.
          # This is useful to reduce the number of CMake's Presets since you can reuse
          # an existing preset with different variables.
          # configurePresetAdditionalArgs: "['-DENABLE_YOUR_FEATURE=1']"

          # This is the name of the CMakePresets.json's configuration to build the project.
          buildPreset: "x64-release"
          # Additional arguments can be appended when building, for example to specify the
          # configuration to build.
          # This is useful to reduce the number of CMake's Presets you need in CMakePresets.json.
          # buildPresetAdditionalArgs: "['--config Release']"

          # This is the name of the CMakePresets.json's configuration to test the project with.
          # testPreset: "ninja-multi-vcpkg"
          # Additional arguments can be appended when testing, for example to specify the config
          # to test.
          # This is useful to reduce the number of CMake's Presets you need in CMakePresets.json.
          # testPresetAdditionalArgs: "['--config Release']"

          # - name: Configure CMake
          #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
          #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
          #   run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

          # - name: Build
          #   # Build your program with the given configuration
          #   run: |
          #     cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      - name: Zip Steam Release
        uses: TheDoctor0/zip-release@0.7.1
        with:
          filename: steam.zip
          path: Steam/
          directory: ${{github.workspace}}/out/build/x64-release
          exclusions: |
            Steam/vcpkg_installed
            Steam/CMakeFiles
            Steam/cmake
            Steam/vcpkg-manifest-install.log
            Steam/cmake_install.cmake
            Steam/build.ninja
            Steam/CMakeCache.txt
            Steam/.ninja_log
            Steam/.ninja_deps
            Steam/steamapps
            Steam/steamcache
          type: zip
      - name: Zip CEngine Release
        uses: TheDoctor0/zip-release@0.7.1
        with:
          filename: cengine.zip
          path: CEngine
          directory: ${{github.workspace}}/out/build/x64-release
          exclusions: |
            CEngine/vcpkg_installed
            CEngine/CMakeFiles
            CEngine/cmake
            CEngine/vcpkg-manifest-install.log
            CEngine/cmake_install.cmake
            CEngine/build.ninja
            CEngine/CMakeCache.txt
            CEngine/.ninja_log
            CEngine/.ninja_deps
            CEngine/steamapps
            CEngine/steamcache
          type: zip
      - name: Upload Release
        uses: actions/upload-artifact@v3
        with:
          name: |
            steam
            cengine
          path: |
            ${{github.workspace}}/out/build/x64-release/steam.zip
            ${{github.workspace}}/out/build/x64-release/cengine.zip
